@page "/post"
@page "/{Id:int?}/post"
@using Radzen
@using Radzen.Blazor

<PageTitle>Post</PageTitle>
<MudDialog>

    <DialogContent>

        @if (!IsLoading)
        {
            <EditForm EditContext="editContext">
                <FluentValidationValidator />
                <FilePickerComp @bind-File="@ImageFile" ImagePreview="@Model.Image" FileDeleted="OnImageDeleted" />
                <br />
                <br />
                <div class="form">

                    @foreach (var item in Model.Translations)
                    {
                        <MudTabs KeepPanelsAlive="true"
                                 Context="tab_ctx"
                                 ApplyEffectsToContainer="true"
                                 Border="true"
                                 Outlined="true"
                                 Rounded="true">
                            <ChildContent>
                                <MudTabPanel Text="Edit">
                                    <div class="translation-form">
                                        <MudTextField @bind-Value="@item.Title"
                                                      For="()=>item.Title"
                                                      Label="@_viewLocalizer[ViewResources.Title]"
                                                      Variant="@MudBlazor.Variant.Outlined" />

                                        <MudTextField @bind-Value="@item.Slug"
                                                      For="()=>item.Slug"
                                                      Label="@_viewLocalizer[ViewResources.Slug]"
                                                      Variant="@MudBlazor.Variant.Outlined" />

                                        <MudSelect @bind-Value="item.CategoryId"
                                                   For="()=>item.CategoryId"
                                                   Label="@_viewLocalizer[ViewResources.Categories]"
                                                   T="int?"
                                                   Variant="@MudBlazor.Variant.Outlined">
                                            @foreach (var category in Categories)
                                            {
                                                <MudSelectItem T="int?" Value="@category.Id">@category.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                        <br />
                                        <RadzenHtmlEditor @bind-Value=@item.Content style="height: 500px; resize:vertical" />



                                    </div>
                                </MudTabPanel>
                                <MudTabPanel Text="Preview">
                                    <div class="translation-preview">
                                        @((MarkupString)item.Content)
                                    </div>
                                </MudTabPanel>
                            </ChildContent>
                            <Header>
                                <div class="d-flex flex-row align-items-center gap-3 px-3">
                                    <MudSelect @bind-Value="item.LanguageId"
                                               Style="min-width:120px;"
                                               T="int"
                                               Dense="true"
                                               Margin="Margin.Dense"
                                               Variant="@MudBlazor.Variant.Outlined">
                                        @foreach (var lang in Languages)
                                        {
                                            <MudSelectItem T="int" Value="lang.Id">
                                                <div class="d-flex flex-row align-item-center gap-1">
                                                    @if (!string.IsNullOrWhiteSpace(lang.Image))
                                                    {
                                                        <img src="@lang.Image" height="24" width="24" />
                                                    }
                                                    @lang.Code
                                                </div>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudButton StartIcon="fas fa-trash-can"
                                               Size="MudBlazor.Size.Small"
                                               Color="MudBlazor.Color.Error"
                                               OnClick="()=>RemoveTranslation(item)">
                                        @_viewLocalizer[ViewResources.Delete]
                                    </MudButton>
                                </div>

                            </Header>
                        </MudTabs>

                    }
                </div>
                <ValidationSummary />
            </EditForm>
        }
        else
        {
            <MudProgressLinear Indeterminate="true" />
        }


    </DialogContent>
    <DialogActions>
        <div class="action-bar">
            <MudButton OnClick="AddNewTranslation"
                       Class="action-button"
                       Disabled="@(Model.Translations.Count==Languages.Count)"
                       StartIcon="@Icons.Material.Rounded.AddCircle"
                       Size="MudBlazor.Size.Large"
                       Color="MudBlazor.Color.Primary"
                       Variant="MudBlazor.Variant.Text">
                @_viewLocalizer[ViewResources.AddNewTranslation]
            </MudButton>

            <MudButton Disabled="@(!IsValid)"
                       Class="action-button"
                       OnClick="OnSubmitAsync"
                       StartIcon="@Icons.Material.Rounded.Save"
                       Color="MudBlazor.Color.Primary"
                       Size="MudBlazor.Size.Large"
                       Variant="MudBlazor.Variant.Filled">
                @if (IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@_viewLocalizer[ViewResources.Processing]</MudText>
                }
                else
                {
                    @_viewLocalizer[ViewResources.SaveChanges]

                }
            </MudButton>
        </div>

    </DialogActions>
</MudDialog>


@code {

    public FileDto? ImageFile { get; set; }
    EditContext? editContext;
    int activeTabIndex;
    public BlogPostRequest Model { get; set; } = new();
    public List<LanguageResponse> Languages { get; set; } = new();
    public List<CategoryResponse> Categories { get; set; } = new();
    private string PreviewContent = string.Empty;
    private int selectedTabIndex = 0;
    private string editorKey = Guid.NewGuid().ToString();
    bool IsValid => editContext != null && editContext.Validate() && Model != null
    && (!string.IsNullOrWhiteSpace(Model.Image) || ImageFile?.StreamContent != null)
    && !IsLoading && !IsBusy;

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public int? Id { get; set; }
    private EventHandler<FieldChangedEventArgs> _handler;

    protected override async Task OnInitializedAsync()
    {
        try
        {


            IsLoading = true;
            var languageResponse = await _languageApiService.GetAllAsync(cancellationToken);
            if (languageResponse.Succeeded)
            {
                Languages = languageResponse.Data;
            }

            var categoryResponse = await _categoryApiService.GetAllAsync(cancellationToken);
            if (categoryResponse.Succeeded)
            {
                Categories = categoryResponse.Data;
            }


            if (Id != null)
            {
                var response = await _blogPostApiService.GetPostByDetailIdAsync(Id.Value, cancellationToken: cancellationToken);
                if (response.Succeeded)
                {
                    Model = response.Data;
                    //editContext?.NotifyFieldChanged(new FieldIdentifier(editContext.Model, eventArgs.FieldIdentifier.FieldName));

                }

            }
            else
            {
                Model = new();
                Model.Translations.Add(new BlogPostTranslationRequest
                    {
                        LanguageId = Languages.FirstOrDefault()?.Id ?? 0,
                        CategoryId = Categories.FirstOrDefault()?.Id
                    });
            }
            editContext = new EditContext(Model);

            _handler = async (sender, eventArgs) =>
            {

                await InvokeAsync(StateHasChanged);
            };

            editContext.OnFieldChanged += _handler;

        }
        catch (Exception ex)
        {
            _snackbarService.DisplayError(ex.Message);
        }
        finally
        {
            IsLoading = false;

        }
    }

    public async Task OnSubmitAsync()
    {
        try
        {

            IsBusy = true;

            if (string.IsNullOrEmpty(Model.Image) && ImageFile?.StreamContent == null)
            {
                _snackbarService.DisplayError("Please select an image file for the post.");
                return;
            }
            if (Model.Translations.Count == 0)
            {
                _snackbarService.DisplayError("Please add at least one translation for the post.");
                return;
            }





            if (Id == null)//New
            {


                var response = await _blogPostApiService.AddPostAsync(ImageFile, Model, cancellationToken);
                if (response.Succeeded)
                {
                    await OnValidSubmit.InvokeAsync();
                    _mudDialog?.Close();

                    _snackbarService.DisplaySuccess("Post successfully added.");
                }
                else
                {
                    _snackbarService.DisplayError(response.Messages);
                }
            }
            else
            {
                var response = await _blogPostApiService.UpdatePostAsync(ImageFile, Model, cancellationToken);
                if (response.Succeeded)
                {
                    await OnValidSubmit.InvokeAsync();
                    _mudDialog?.Close();

                    _snackbarService.DisplaySuccess("Post successfully added.");
                }
                else
                {
                    _snackbarService.DisplayError(response.Messages);
                }

            }
        }
        catch (Exception ex)
        {
            _snackbarService.DisplayError(ex.Message);
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();

        }
    }

    private void AddNewTranslation()
    {
        // Find the first LanguageId that is not present in Model.Translations
        var missingLanguage = Languages
            .FirstOrDefault(lang => !Model.Translations.Any(t => t.LanguageId == lang.Id));

        if (missingLanguage != null)
        {
            Model.Translations.Add(new BlogPostTranslationRequest
                {
                    LanguageId = missingLanguage.Id
                });
            //editContext?.NotifyFieldChanged(new FieldIdentifier(editContext.Model, nameof(Model.Translations)));
        }
    }

    private void RemoveTranslation(BlogPostTranslationRequest? blogPostTranslation)
    {

        if (blogPostTranslation != null)
        {
            Model.Translations.Remove(blogPostTranslation);
            //editContext?.NotifyFieldChanged(new FieldIdentifier(editContext.Model, nameof(Model.Translations)));
        }
    }

    void OnImageDeleted()
    {
        Model.Image = string.Empty;
        editContext?.NotifyFieldChanged(new FieldIdentifier(editContext.Model, nameof(Model.Image)));

    }
    public override void Dispose()
    {
        base.Dispose();
        editContext.OnFieldChanged -= _handler;

    }


}

