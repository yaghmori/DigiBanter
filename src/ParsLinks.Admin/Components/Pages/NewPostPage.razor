@page "/post"
@using Radzen
@using Radzen.Blazor

<PageTitle>Post</PageTitle>
<MudDialog>

    <DialogContent>

        @if (!IsLoading)
        {
            <EditForm EditContext="editContext">
                <FluentValidationValidator />
                <FilePickerComp @bind-File="@ImageFile" />
                <br />
                <br />
                <div class="form">

                    @foreach (var item in Model.Translations)
                    {
                        <MudTabs KeepPanelsAlive="true"
                                 Context="tab_ctx"
                                 ApplyEffectsToContainer="true"
                                 Border="true"
                                 Outlined="true"
                                 Rounded="true">
                            <ChildContent>
                                <MudTabPanel Text="Edit">
                                    <div class="translation-form">
                                        <MudTextField @bind-Value="@item.Title"
                                                      For="()=>item.Title"
                                                      Label="@_viewLocalizer[ViewResources.Title]"
                                                      Variant="@MudBlazor.Variant.Outlined" />

                                        <MudTextField @bind-Value="@item.Slug"
                                                      For="()=>item.Slug"
                                                      Label="@_viewLocalizer[ViewResources.Slug]"
                                                      Variant="@MudBlazor.Variant.Outlined" />

                                        <MudSelect @bind-Value="item.CategoryId"
                                                   For="()=>item.CategoryId"
                                                   Label="@_viewLocalizer[ViewResources.Categories]"
                                                   T="int?"
                                                   Variant="@MudBlazor.Variant.Outlined">
                                            @foreach (var category in Categories)
                                            {
                                                <MudSelectItem T="int?" Value="@category.Id">@category.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                        <br />
                                        <RadzenHtmlEditor @bind-Value=@item.Content style="height: 500px; resize:vertical" />



                                    </div>
                                </MudTabPanel>
                                <MudTabPanel Text="Preview">
                                    <div class="translation-preview">
                                        @((MarkupString)item.Content)
                                    </div>
                                </MudTabPanel>
                            </ChildContent>
                            <Header>
                                <div class="d-flex flex-row align-items-center gap-3 px-3">
                                    <MudSelect @bind-Value="item.LanguageId"
                                               Style="min-width:120px;"
                                               T="int"
                                               Dense="true"
                                               Margin="Margin.Dense"
                                               Variant="@MudBlazor.Variant.Outlined">
                                        @foreach (var lang in Languages)
                                        {
                                            <MudSelectItem T="int" Value="lang.Id">
                                                <div class="d-flex flex-row align-item-center gap-1">
                                                    @if (!string.IsNullOrWhiteSpace(lang.Image))
                                                    {
                                                        <img src="@lang.Image" height="24" width="24" />
                                                    }
                                                    @lang.Code
                                                </div>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudIconButton Icon="@Icons.Material.Rounded.Delete"
                                                   Size="MudBlazor.Size.Small"
                                                   Color="MudBlazor.Color.Error"
                                                   OnClick="()=>Model.Translations.Remove(item)" />
                                </div>

                            </Header>
                        </MudTabs>

                    }
                </div>
            </EditForm>
        }
        else
        {
            <MudProgressLinear Indeterminate="true" />
        }


    </DialogContent>
    <DialogActions>
        <div class="action-bar">
            <MudButton OnClick="AddNewTranslation"
                       Class="action-button"
                       Disabled="@(Model.Translations.Count==Languages.Count)"
                       StartIcon="@Icons.Material.Rounded.AddCircle"
                       Size="MudBlazor.Size.Large"
                       Color="MudBlazor.Color.Primary"
                       Variant="MudBlazor.Variant.Text">
                Add Translation
            </MudButton>

            <MudButton Disabled="@(!IsValid)"
                       Class="action-button"
                       OnClick="OnSubmitAsync"
                       StartIcon="@Icons.Material.Rounded.Save"
                       Color="MudBlazor.Color.Primary"
                       Size="MudBlazor.Size.Large"
                       Variant="MudBlazor.Variant.Filled">
                @if (IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@_viewLocalizer[ViewResources.Processing]</MudText>
                }
                else
                {
                    @_viewLocalizer[ViewResources.SaveChanges]

                }
            </MudButton>
        </div>

    </DialogActions>
</MudDialog>


@code {
    public FileDto? ImageFile { get; set; }
    EditContext? editContext;
    int activeTabIndex;
    public BlogPostRequest Model { get; set; } = new();
    public List<LanguageResponse> Languages { get; set; } = new();
    public List<CategoryResponse> Categories { get; set; } = new();
    private string PreviewContent = string.Empty;
    private int selectedTabIndex = 0;
    private string editorKey = Guid.NewGuid().ToString();
    bool IsValid => editContext != null && editContext.Validate() && !IsLoading && !IsBusy;

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {


            IsLoading = true;
            editContext = new EditContext(Model);
            var languageResponse = await _languageApiService.GetAllAsync(cancellationToken);
            if (languageResponse.Succeeded)
            {
                Languages = languageResponse.Data;
            }

            var categoryResponse = await _categoryApiService.GetAllAsync(cancellationToken);
            if (categoryResponse.Succeeded)
            {
                Categories = categoryResponse.Data;
            }


            Model.Translations.Add(new BlogPostTranslationRequest
                {
                    LanguageId = Languages.FirstOrDefault()?.Id ?? 0,
                    CategoryId = Categories.FirstOrDefault()?.Id
                });
            editContext.NotifyValidationStateChanged();

        }
        catch (Exception ex)
        {
            _snackbarService.DisplayError(ex.Message);
        }
        finally
        {
            IsLoading = false;

        }
    }

    public async Task OnSubmitAsync()
    {
        try
        {

            IsBusy = true;

            if (ImageFile?.StreamContent == null)
            {
                _snackbarService.DisplayError("Please select an image file for the post.");
                return;
            }
            if (Model.Translations.Count == 0)
            {
                _snackbarService.DisplayError("Please add at least one translation for the post.");
                return;
            }

            // foreach (var item in Model.Translations)
            // {
            //     if (EditorRefs.TryGetValue(item.Key, out var editorRef) && editorRef != null)
            //     {
            //         item.Content = await editorRef.GetHTML();
            //         if (string.IsNullOrWhiteSpace(await editorRef.GetText()))
            //         {
            //             var fieldIdentifier = new FieldIdentifier(Model, nameof(BlogPostTranslationRequest.Content));
            //             _snackbarService.DisplayWarning($"Content for {Languages.FirstOrDefault(x => x.Id == item.LanguageId)?.Name} cannot be empty.");
            //             return;
            //         }
            //     }
            // }

            if (editContext?.Validate() == false)
            {
                _snackbarService.DisplayError("Please fix the validation errors.");
                return;
            }




            var response = await _blogPostApiService.AddPostAsync(ImageFile, Model, cancellationToken);
            if (response.Succeeded)
            {
                await OnValidSubmit.InvokeAsync();
                _mudDialog?.Close();

                _snackbarService.DisplaySuccess("Post successfully added.");
            }
            else
            {
                _snackbarService.DisplayError(response.Messages);
            }

        }
        catch (Exception ex)
        {
            _snackbarService.DisplayError(ex.Message);
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();

        }
    }
    private void AddNewTranslation()
    {
        // Find the first LanguageId that is not present in Model.Translations
        var missingLanguage = Languages
            .FirstOrDefault(lang => !Model.Translations.Any(t => t.LanguageId == lang.Id));

        if (missingLanguage != null)
        {
            Model.Translations.Add(new BlogPostTranslationRequest
                {
                    LanguageId = missingLanguage.Id
                });
        }
    }



    public override void Dispose()
    {
        base.Dispose();
    }


}

