@if (!IsLoading)
{
    if (Model != null)
    {
        <div class="paper-box post-item">
            <div class="cover">
                <img class="img" src="@Model.Image" />
            </div>
            <div class="content-group">
                <div class="content">
                    <div class="title">@Model.Title</div>
                    <div class="info">
                        <i class="material-icons-two-tone">calendar_today</i>
                        <span>@Model.PublishedAt.ToElapsedTime()</span>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(Model.Author))
                    {
                        <div class="info">
                            <i class="material-icons-outlined">account_circle</i>
                            <span>@Model.Author</span>
                        </div>
                    }


                    <div class="categories">
                        <div class="chipset">
                            @foreach (var item in Model.Categories)
                            {
                                <MudChip Color="@MudBlazor.Color.Inherit"
                                         Variant="@MudBlazor.Variant.Text"
                                         Size="MudBlazor.Size.Small"
                                         T="string"
                                         Text="@item.Name" />
                            }
                        </div>
                    </div>
                    <div class="translation">

                        <div class="chipset">
                            @foreach (var item in Model.AvailableTranslations)
                            {
                                <MudChip Color="@MudBlazor.Color.Primary"
                                         Variant="@MudBlazor.Variant.Text"
                                         Size="MudBlazor.Size.Small"
                                         T="string"
                                         Text="@item" />
                            }
                        </div>
                    </div>

                </div>

                <div class="action-group">

                    <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="@MudBlazor.Variant.Text">
                        @{
                            var statusColor = Model.Status == BlogPostStatusEnum.Published ? MudBlazor.Color.Success : Model.Status == BlogPostStatusEnum.Draft ? MudBlazor.Color.Warning : MudBlazor.Color.Inherit;

                        }
                        @if (!postStatusLoading)
                        {
                            <MudMenu Dense>
                                <ActivatorContent>
                                    <MudIconButton Color="statusColor">
                                        <span class="d-flex align-items-center gap-1">
                                            <i class="@("far "+Model.Status.GetDisplayShortName())" />
                                            @Model.Status.GetDisplayDescription()

                                        </span>
                                    </MudIconButton>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (var item in Enum.GetValues<BlogPostStatusEnum>().ToList())
                                    {
                                        var itemColor = item == BlogPostStatusEnum.Published ? MudBlazor.Color.Success : item == BlogPostStatusEnum.Draft ? MudBlazor.Color.Warning : MudBlazor.Color.Inherit;

                                        <MudMenuItem OnClick="() => OnStatusChangedAsync(item)">
                                            <span class="d-flex align-items-center gap-3">
                                                <i class="@("fad "+item.GetDisplayShortName())" />
                                                @item.GetDisplayDescription()

                                            </span>
                                        </MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>

                        }
                        else
                        {
                            <CircularLoading Class="spinner-border-sm" />
                        }


                        <MudTooltip Text="@_viewLocalizer[ViewResources.Edit]" Arrow="true" Placement="Placement.Top">
                            <MudIconButton OnClick="OnEdit" Color="@MudBlazor.Color.Inherit"><i class="far fa-edit" /></MudIconButton>
                        </MudTooltip>

                        <MudTooltip Text="@_viewLocalizer[ViewResources.Delete]" Arrow="true" Placement="Placement.Top">
                            <MudIconButton OnClick="OnDeleteAsync" Color="@MudBlazor.Color.Error"><i class="fas fa-trash-can" /></MudIconButton>
                        </MudTooltip>
                    </MudButtonGroup>

                </div>
            </div>
        </div>
    }

}
else
{
    <div class="paper-box post-item disable">
        <div class="cover">
            <MudSkeleton Class="img" Style="border-radius:10px; width:250;min-width:250px; height:150px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" />
        </div>
        <div class="content-group">
            <div class="content">


                <div class="title">
                    <MudSkeleton Animation="Animation.Pulse" Width="40%" Height="25px" />
                </div>


                <div class="date">
                    <MudSkeleton Animation="Animation.Pulse" Width="100px" />
                </div>


                <div class="author">
                    <MudSkeleton Animation="Animation.Pulse" Width="120px" />
                </div>

                <div class="chipset" style="gap:5px;">
                    <MudSkeleton Animation="Animation.Pulse" Width="50px" Height="30px" Style="border-radius:.5rem;" />
                </div>
                <div class="chipset" style="gap:5px;">
                    <MudSkeleton Animation="Animation.Pulse" Width="30px" Height="30px" Style="border-radius:.5rem;" />
                    <MudSkeleton Animation="Animation.Pulse" Width="40px" Height="30px" Style="border-radius:.5rem;" />
                    <MudSkeleton Animation="Animation.Pulse" Width="40px" Height="30px" Style="border-radius:.5rem;" />
                </div>

            </div>

            <div class="action-group">
                <MudSkeleton Animation="Animation.Pulse" Width="170px" Height="45px" />

            </div>



        </div>
    </div>

}


@code {
    bool postStatusLoading = false;

    [Parameter]
    public BlogPostResponse Model { get; set; }

    [Parameter]
    public EventCallback<BlogPostResponse> OnStatusChanged { get; set; }


    [Parameter]
    public EventCallback<BlogPostResponse> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<BlogPostResponse> OnEdited { get; set; }

    public async Task OnDeleteAsync()
    {

        var dgResult = await _dialogService.ShowDeleteMessageBoxAsync(_messageLocalizer[MessageResources.PostDeleteConfirmation].Value);
        if (dgResult)
        {
            var response = await _blogPostApiService.DeletePostByIdAsync(Model.Id);
            if (response.Succeeded)
            {
                _snackbarService.DisplaySuccess(_messageLocalizer[MessageResources.PostSuccessfullyDeleted]);
                await OnDeleted.InvokeAsync(Model);
            }
            else
            {
                _snackbarService.DisplayError(response?.Messages);
            }

        }
    }
    public void OnEdit()
    {

        var parameters = new Dictionary<string, object>
        {
            { nameof(PostDetailPage.OnValidSubmit),EventCallback.Factory.Create(this,async () => await OnEdited.InvokeAsync())},
            { nameof(PostDetailPage.Id),Model.Id}
        };

        var options = new DialogOptions()
            { CloseButton = true, BackdropClick = false, FullWidth = true, MaxWidth = MaxWidth.Large };
        _dialogService.ShowDialog<PostDetailPage>(parameters, options, _viewLocalizer[ViewResources.EditPost]);

    }
    public async Task OnStatusChangedAsync(BlogPostStatusEnum status)
    {
        try
        {
            if (Model.Status == status)
                return;

            postStatusLoading = true;
            var dgResult = await _dialogService.ShowConfirmationDialogAsync(_messageLocalizer[MessageResources.PostStatusChangeConfirmation].Value, btnOk: _viewLocalizer[ViewResources.ChangeStatus].Value);
            if (dgResult)
            {
                var response = await _blogPostApiService.ChangePostStatusAsync(Model.Id, status, cancellationToken);
                if (response.Succeeded)
                {
                    Model.Status = status;
                    await OnStatusChanged.InvokeAsync(Model);
                }
                else
                {
                    _snackbarService.DisplayError(response?.Messages);
                }

            }
        }
        catch (Exception ex)
        {
            _snackbarService.DisplayError(ex.Message);
        }
        finally
        {
            postStatusLoading = false;
            await InvokeAsync(StateHasChanged);

        }
    }

}