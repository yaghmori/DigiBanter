@if (!IsLoading)
{
    if (Model != null)
    {
        <div class="paper-box post-item">
            <div class="content-group">
                <div class="content">
                    <div class="title">@Model.Name</div>
                    <div class="translation">

                        <div class="chipset">
                            @foreach (var item in Model.AvailableTranslations)
                            {
                                <MudChip Color="@MudBlazor.Color.Primary"
                                         Variant="@MudBlazor.Variant.Text"
                                         Size="MudBlazor.Size.Small"
                                         T="string"
                                         Text="@item" />
                            }
                        </div>
                    </div>

                </div>

                <div class="action-group">

                    <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="@MudBlazor.Variant.Text">
                
                        <MudTooltip Text="@_viewLocalizer[ViewResources.Edit]" Arrow="true" Placement="Placement.Top">
                            <MudIconButton OnClick="OnEdit" Color="@MudBlazor.Color.Inherit"><i class="far fa-edit" /></MudIconButton>
                        </MudTooltip>

                        <MudTooltip Text="@_viewLocalizer[ViewResources.Delete]" Arrow="true" Placement="Placement.Top">
                            <MudIconButton OnClick="OnDeleteAsync" Color="@MudBlazor.Color.Error"><i class="fas fa-trash-can" /></MudIconButton>
                        </MudTooltip>
                    </MudButtonGroup>

                </div>
            </div>
        </div>
    }

}
else
{
    <div class="paper-box post-item disable">
        <div class="content-group">
            <div class="content">


                <div class="title">
                    <MudSkeleton Animation="Animation.Pulse" Width="40%" Height="25px" />
                </div>
                <div class="chipset" style="gap:5px;">
                    <MudSkeleton Animation="Animation.Pulse" Width="30px" Height="30px" Style="border-radius:.5rem;" />
                    <MudSkeleton Animation="Animation.Pulse" Width="40px" Height="30px" Style="border-radius:.5rem;" />
                    <MudSkeleton Animation="Animation.Pulse" Width="40px" Height="30px" Style="border-radius:.5rem;" />
                </div>

            </div>

            <div class="action-group">
                <MudSkeleton Animation="Animation.Pulse" Width="170px" Height="45px" />

            </div>



        </div>
    </div>

}


@code {
    bool postStatusLoading = false;

    [Parameter]
    public CategoryResponse Model { get; set; }

    [Parameter]
    public EventCallback<CategoryResponse> OnStatusChanged { get; set; }


    [Parameter]
    public EventCallback<CategoryResponse> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<CategoryResponse> OnEdited { get; set; }

    public async Task OnDeleteAsync()
    {

        var dgResult = await _dialogService.ShowDeleteMessageBoxAsync(_messageLocalizer[MessageResources.CategoryDeleteConfirmation].Value);
        if (dgResult)
        {
            var response = await _categoryApiService.DeleteByIdAsync(Model.Id);
            if (response.Succeeded)
            {
                _snackbarService.DisplaySuccess(_messageLocalizer[MessageResources.CategorySuccessfullyDeleted]);
                await OnDeleted.InvokeAsync(Model);
            }
            else
            {
                _snackbarService.DisplayError(response?.Messages);
            }

        }
    }
    public void OnEdit()
    {

        var parameters = new Dictionary<string, object>
        {
            { nameof(CategoryDetailDialog.OnValidSubmit),EventCallback.Factory.Create(this,async () => await OnEdited.InvokeAsync())},
            { nameof(CategoryDetailDialog.Id),Model.Id}
        };

        var options = new DialogOptions()
            { CloseButton = true, BackdropClick = false, FullWidth = true, MaxWidth = MaxWidth.Large };
        _dialogService.ShowDialog<CategoryDetailDialog>(parameters, options, _viewLocalizer[ViewResources.Edit]);

    }
}