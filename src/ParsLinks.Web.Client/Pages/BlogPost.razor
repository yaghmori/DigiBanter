@page "/blog/{id:int}"
@page "/{lang}/blog/{id:int}"
@attribute [StreamRendering]


<PageTitle>@Model?.Title</PageTitle>
<div class="container">
    @if (!IsBussy)
    {
        @if (Model is not null)
        {
            <div class="article">
                <div class="cover">
                    <img class="img" src="@Model.Image" alt="@Model.Content">
                </div>
                <div class="body">

                    <div class="title">
                        @Model.Title
                    </div>
                    <div class="author">
                        @Model.Author
                    </div>

                    <div class="date">
                        <i class="material-icons-two-tone">calendar_today</i>

                        @Model.PublishedAt
                    </div>
                    <div class="info">
                        <span>
                            <i class="fad fa-solid fa-timer"></i>
                            <span style="color:gray">@Model.EstimatedReadingTime min read</span>
                        </span>
                        @if (!string.IsNullOrWhiteSpace(Model.Category))
                        {
                            <MudChip se Variant="MudBlazor.Variant.Text" Size="MudBlazor.Size.Small" T="string" Text="@Model.Category" />
                        }
                    </div>

                    <div class="truncate">
                        <MarkupStringComp ChildContent="@Model.Content" />
                    </div>

                </div>

            </div>
        }
        else
        {
            <p>Post not found</p>
        }
    }
    else
    {
        <MudProgressLinear Indeterminate />

    }
    <div style="margin-top:100px;">
        <h5>You May Also Like</h5>
        <hr />

    </div>
    <div class="related-items">
        <PodcastRandomList />
    </div>
    <div style="margin-top:100px;">
        <h5>Comments (3)</h5>
        <hr />

    </div>

    <div class="comments">
        <CommentList />
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }


    public bool IsBussy { get; set; }

    [Parameter]
    public BlogPostResponse? Model { get; set; }


    protected override async Task OnInitializedAsync()
    {

        try
        {
            IsBussy = true;
            if (Id == null)
                return;

            var response = await _blogPostApiService.GetPostByIdAsync(Id.Value, lang);
            if (response.Succeeded)
                Model = response.Data;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsBussy = false;
        }


    }


}

