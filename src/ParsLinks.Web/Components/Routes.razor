@inject NavigationManager NavigationManager
<CascadingValue Name="Language" Value="@CurrentLanguage">


    <Router AppAssembly="typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly }">


        <Found Context="routeData">
            <RouteView RouteData="routeData" DefaultLayout="typeof(DefaultLayout)" />
            <FocusOnNavigate RouteData="routeData" Selector="h1" />
        </Found>
        <NotFound>
            <h1>Page not found</h1>
            <p>Sorry, there's nothing at this address.</p>
        </NotFound>

    </Router>
</CascadingValue>

@code {
    private string CurrentLanguage { get; set; } = "en"; // Default language
    private readonly HashSet<string> SupportedLanguages = new() { "en", "fa", "fr", "es" };

    // private Task OnNavigateAsync(Microsoft.AspNetCore.Components.Routing.NavigationContext args)
    // {
    //     var uri = NavigationManager.ToAbsoluteUri(args.Path);
    //     var segments = uri.Segments;

    //     if (segments.Length < 2 || string.IsNullOrWhiteSpace(segments[1]))
    //     {
    //         // // No language segment, redirect to default language.
    //         // var route = $"/{CurrentLanguage}" + uri.PathAndQuery.TrimEnd('/');
    //         // NavigationManager.NavigateTo(route, forceLoad: true);
    //     }
    //     else
    //     {
    //         var firstSegment = segments[1].TrimEnd('/');
    //         if (SupportedLanguages.Contains(firstSegment))
    //         {
    //             // Valid language segment, set as current language.
    //             CurrentLanguage = firstSegment;
    //         }
    //         else
    //         {
    //             // // Invalid language segment, redirect to default language without losing path.
    //             // CurrentLanguage = "en"; // Default fallback language
    //             if (uri.AbsolutePath != "/404")
    //                 NavigationManager.NavigateTo($"/{CurrentLanguage}/{uri.PathAndQuery}");
    //         }
    //     }

    //     return Task.CompletedTask;

    // }
}